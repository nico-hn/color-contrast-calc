[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "lib/color-contrast-calc.js",
    "content": "\"use strict\";\n\nconst ColorUtils = require(\"./color-utils\").ColorUtils;\nconst Utils = ColorUtils;\n\n/**\n * Provides methods to calculate RGB colors.\n * An instance represents a RGB color.\n */\nclass ColorContrastCalc {\n  /**\n   * @param {string|Array<number, number, number>} rgb - RGB value represented as a string (hex code) or an array of numbers\n   * @param {string} [name=null] - the value of this.name: if null, the value of this.hexCode is set to this.name instead\n   */\n  constructor(rgb, name = null) {\n    const ownClass = this.constructor;\n    /** @property {Array<number, number, number>} rgb - RGB value repsented as an array of decimal numbers */\n    this.rgb = Utils.isString(rgb) ? Utils.hexCodeToDecimal(rgb) : rgb;\n    /** @property {number} relativeLuminance - The relative luminance of the color */\n    this.relativeLuminance = ownClass.relativeLuminance(this.rgb);\n    /** @property {string} name - If no name is explicitely given, the property is set to the value of this.hexCode */\n    this.name = name === null ? Utils.decimalToHexCode(this.rgb) : name;\n    /** @property {string} hexCode - The RGB value in hex code notation */\n    this.hexCode = Utils.decimalToHexCode(this.rgb);\n    this.freezeProperties();\n    /** @private */\n    this._hsl = null;\n  }\n\n  /**\n   * @private\n   */\n  static tristimulusValue(primaryColor, base = 255) {\n    const s = primaryColor / base;\n    if (s <= 0.03928) {\n      return s / 12.92;\n    } else {\n      return Math.pow((s + 0.055) / 1.055, 2.4);\n    }\n  }\n\n  /**\n   * Calculate the relative luminance of a RGB color given as a string or an array of numbers\n   * @param {string|Array<number, number, number>} rgb - RGB value represented as a string (hex code) or an array of numbers\n   * @returns {number} Relative luminance\n   */\n  static relativeLuminance(rgb = [255, 255, 255]) {\n    if (Utils.isString(rgb)) { rgb = Utils.hexCodeToDecimal(rgb); }\n\n    const [r, g, b] = rgb.map(c => this.tristimulusValue(c));\n    return r * 0.2126 + g * 0.7152 + b * 0.0722;\n  }\n\n  /**\n   * Calculate the contrast ratio of given colors\n   * @param {string|Array<number, number, number>} foreground - RGB value represented as a string (hex code) or an array of numbers\n   * @param {string|Array<number, number, number>} background - RGB value represented as a string (hex code) or an array of numbers\n   * @returns {number} Contrast ratio\n   */\n  static contrastRatio(foreground, background) {\n    const [l1, l2] = [foreground, background]\n            .map(c => this.relativeLuminance(c));\n    return this.luminanceToContrastRatio(l1, l2);\n  }\n\n  /**\n   * Returns an instance of ColorContrastCalc for a predefined color name.\n   * @param {string} name - names are defined at https://www.w3.org/TR/SVG/types.html#ColorKeywords\n   * @returns {ColorContrastCalc}\n   */\n  static getByName(name) {\n    return this.NAME_TO_COLOR.get(name);\n  }\n\n  /**\n   * Returns an instance of ColorContrastCalc for a hex code\n   * @param {string} code - RGB value in hex code\n   * @returns {ColorContrastCalc}\n   */\n  static getByHexCode(code) {\n    const hexCode = Utils.normalizeHexCode(code);\n    const registeredCode = this.HEX_TO_COLOR.get(hexCode);\n    return registeredCode ? registeredCode : new ColorContrastCalc(hexCode);\n  }\n\n  /**\n   * Returns a function to be used as a parameter of Array.prototype.sort()\n   * @param {string} [colorOrder=\"rgb\"] - A left side primary color has a higher sorting precedence\n   * @param {string} [keyType=\"color\"] - Type of keys used for sorting: \"color\", \"hex\" or \"rgb\"\n   * @param {function} [keyMapper=null] - A function used to retrive key values from elements to be sorted\n   * @returns {function} Function that compares given two colors\n   */\n  static compareFunction(colorOrder = \"rgb\", keyType = \"color\", keyMapper = null) {\n    return this.Sorter.compareFunction(colorOrder, keyType, keyMapper);\n  }\n\n  /**\n   * Sorts colors in an array and returns the result as a new array\n   * @param {ColorContrastCalc[]|String[]} colors - List of colors\n   * @param {string} [colorOrder=\"rgb\"] - A left side primary color has a higher sorting precedence, and an uppercase letter means descending order\n   * @param {function} [keyMapper=null] - A function used to retrive key values from elements to be sorted\n   * @param {string} [mode=\"auto\"] - If set to \"hex\", key values are handled as hex code strings\n   * @returns {ColorContrastCalc[]} An array of sorted colors\n   */\n  static sort(colors, colorOrder = \"rgb\", keyMapper = null, mode = \"auto\") {\n    return this.Sorter.sort(colors, colorOrder, keyMapper, mode);\n  }\n\n  /**\n   * Creates an instance of ColorContractCalc from an HSL value\n   * @param {Array<number,number, number>} hsl - an array of numbers that represents an HSL value\n   * @returns {ColorContrastCalc} An instance of ColorContrastCalc\n   */\n  static newHslColor(hsl) {\n    return this.getByHexCode(Utils.hslToHexCode(hsl));\n  }\n\n  /**\n   * @private\n   */\n  static luminanceToContrastRatio(luminance1, luminance2) {\n    const [l1, l2] = [luminance1, luminance2]\n            .sort((f, s) => s - f);\n    return (l1 + 0.05) / (l2 + 0.05);\n  }\n\n  /**\n   * @private\n   */\n  static setup(colorKeywordsJSON) {\n    this.loadColorKeywords(colorKeywordsJSON);\n    this.assignColorConstants();\n    this.generateWebSafeColors();\n    Object.freeze(this);\n  }\n\n  /**\n   * @private\n   */\n  static loadColorKeywords(colorKeywordsJSON) {\n    /**\n     * Array of named colors defined at https://www.w3.org/TR/SVG/types.html#ColorKeywords\n     * @property {ColorContrastCalc[]} NAMED_COLORS\n     */\n    this.NAMED_COLORS = [];\n    /** @private */\n    this.NAME_TO_COLOR = new Map();\n    /** @private */\n    this.HEX_TO_COLOR = new Map();\n    colorKeywordsJSON.forEach(color => {\n      const [name, hex] = color;\n      const calc = new ColorContrastCalc(hex, name);\n      this.NAMED_COLORS.push(calc);\n      this.NAME_TO_COLOR.set(name, calc);\n      this.HEX_TO_COLOR.set(hex, calc);\n    });\n\n    Object.freeze(this.NAMED_COLORS);\n  }\n\n  /**\n   * @private\n   */\n  static assignColorConstants() {\n    /** @property {ColorContrastCalc} BLACK - an instance that represents #000000 */\n    this.BLACK = this.HEX_TO_COLOR.get(\"#000000\");\n    /** @property {ColorContrastCalc} WHITE - an instance that represents #ffffff */\n    this.WHITE = this.HEX_TO_COLOR.get(\"#ffffff\");\n    /** @property {ColorContrastCalc} GRAY - an instance that represents #808080 */\n    this.GRAY = this.NAME_TO_COLOR.get(\"gray\");\n    this.prototype.BLACK = this.BLACK;\n    this.prototype.WHITE = this.WHITE;\n    this.prototype.GRAY = this.GRAY;\n  }\n\n  /**\n   * @private\n   */\n  static generateWebSafeColors() {\n    /**\n     * Array of web safe colors\n     * @property {ColorContrastCalc[]} WEB_SAFE_COLORS\n     */\n    this.WEB_SAFE_COLORS = [];\n\n    for (let r = 0; r < 16; r += 3) {\n      for (let g = 0; g < 16; g += 3) {\n        for (let b = 0; b < 16; b += 3) {\n          let hexCode = Utils.decimalToHexCode([r, g, b].map(c => c * 17));\n          let predefined = this.HEX_TO_COLOR.get(hexCode);\n          let color = predefined ? predefined : new ColorContrastCalc(hexCode);\n          this.WEB_SAFE_COLORS.push(color);\n        }\n      }\n    }\n  }\n\n  /**\n   * @property {Array<number, number, number>} hsl - HSL value repsented as an array of decimal numbers\n   */\n  get hsl() {\n    if (this._hsl) { return this._hsl; }\n    this._hsl = Utils.rgbToHsl(this.rgb);\n    return this._hsl;\n  }\n\n  /**\n   * Calculate the contrast ratio against another color\n   * @param {ColorContrastCalc|string|Array<number, number, number>} color - another instance of ColorContrastCalc or a RGB value\n   * @returns {number}\n   */\n  contrastRatioAgainst(color) {\n    const ownClass = this.constructor;\n\n    if (!(color instanceof ColorContrastCalc)) {\n      return ownClass.contrastRatio(this.rgb, color);\n    }\n\n    return ownClass.luminanceToContrastRatio(this.relativeLuminance,\n                                             color.relativeLuminance);\n  }\n\n  /**\n   * Returns an array of named colors that satisfy a given level of contrast ratio\n   * @param {string} [level=\"AA\"] - A, AA or AAA\n   * @returns {ColorContrastCalc[]}\n   */\n  colorsWithSufficientContrast(level = \"AA\") {\n    const ratio = this.levelToContrastRatio(level);\n\n    return this.constructor.NAMED_COLORS.filter(combinedColor => {\n      return this.contrastRatioAgainst(combinedColor) >= ratio;\n    });\n  }\n\n  /**\n   * @param {number} ratio - Value in percent\n   * @param {string} [name=null] - Name of color\n   * @returns {ColorContrastCalc}\n   */\n  newContrastColor(ratio, name = null) {\n    return this.generateNewColor(Utils.ContrastCalc, ratio, name);\n  }\n\n  /**\n   * @param {number} ratio - Value in percent\n   * @param {string} [name=null] - Name of color\n   * @returns {ColorContrastCalc}\n   */\n  newBrightnessColor(ratio, name = null) {\n    return this.generateNewColor(Utils.BrightnessCalc, ratio, name);\n  }\n\n  /**\n   * @param {number} ratio - Value in percent\n   * @param {string} [name=null] - Name of color\n   * @returns {ColorContrastCalc}\n   */\n  newInvertColor(ratio, name = null) {\n    return this.generateNewColor(Utils.InvertCalc, ratio, name);\n  }\n\n  /**\n   * @param {number} degree - Value in degree\n   * @param {string} [name=null] - Name of color\n   * @returns {ColorContrastCalc}\n   */\n  newHueRotateColor(degree, name = null) {\n    return this.generateNewColor(Utils.HueRotateCalc, degree, name);\n  }\n\n  /**\n   * @param {number} ratio - Value in percent\n   * @param {string} [name=null] - Name of color\n   * @returns {ColorContrastCalc}\n   */\n  newSaturateColor(ratio, name = null) {\n    return this.generateNewColor(Utils.SaturateCalc, ratio, name);\n  }\n\n  /**\n   * @param {number} ratio - Value in percent\n   * @param {string} [name=null] - Name of color\n   * @returns {ColorContrastCalc}\n   */\n  newGrayscaleColor(ratio, name = null) {\n    return this.generateNewColor(Utils.GrayscaleCalc, ratio, name);\n  }\n\n  /**\n   * Tries to find a color whose contrast against the base color is close to a given level.\n   *\n   * The returned color is gained by modifying the brightness of otherColor.\n   * Even when a color that satisfies the level is not found, it returns a new color anyway.\n   * @param {ColorContrastCalc} otherColor - The color before the modification of brightness\n   * @param {string} [level=\"AA\"] - A, AA or AAA\n   * @returns {ColorContrastCalc} A color whose contrast against the base color is close to a specified level\n   */\n  findBrightnessThreshold(otherColor, level = \"AA\") {\n    const targetRatio = this.levelToContrastRatio(level);\n    const criteria = this.brightnessThresholdCriteria(targetRatio, otherColor);\n    const w = otherColor.calcUpperRatioLimit() / 2;\n    const upperColor = otherColor.newBrightnessColor(w * 2);\n\n    if (otherColor.isBrighterThan(this) && ! upperColor.hasSufficientContrast(this, level)) {\n      return upperColor;\n    }\n\n    const [r, lastSufficentRatio] = this.calcBrightnessRatio(otherColor, targetRatio, criteria, w);\n\n    const nearestColor = otherColor.newBrightnessColor(criteria.round(r));\n\n    if (lastSufficentRatio && nearestColor.contrastRatioAgainst(this) < targetRatio) {\n      return otherColor.newBrightnessColor(criteria.round(lastSufficentRatio));\n    }\n\n    return nearestColor;\n  }\n\n  /**\n   * Tries to find a color whose contrast against the base color is close to a given level.\n   *\n   * The returned color is gained by modifying the lightness of otherColor.\n   * Even when a color that satisfies the level is not found, it returns a new color anyway.\n   * @param {ColorContrastCalc} otherColor - The color before the modification of lightness\n   * @param {string} [level=\"AA\"] - A, AA or AAA\n   * @returns {ColorContrastCalc} A color whose contrast against the base color is close to a specified level\n   */\n  findLightnessThreshold(otherColor, level = \"AA\") {\n    const targetRatio = this.levelToContrastRatio(level);\n    const criteria = this.brightnessThresholdCriteria(targetRatio, otherColor);\n    const [h, s, initL] = Utils.rgbToHsl(otherColor.rgb);\n    const [max, min] = this.shouldScanDarkerSide(otherColor) ? [initL, 0] : [100, initL];\n    const boundaryColor = this.lightnessBoundaryColor(max, min, level);\n\n    if (boundaryColor) { return boundaryColor; }\n\n    let l = (max + min) / 2;\n    let lastSufficientLightness = null;\n\n    for (let d of ColorContrastCalc.binarySearchWidth(max - min, 0.01)) {\n      let newColor = Utils.hslToRgb([h, s, l]);\n      let contrastRatio = this.contrastRatioAgainst(newColor);\n\n      if (contrastRatio >= targetRatio) { lastSufficientLightness = l; }\n      if (contrastRatio === targetRatio) { break; }\n      l += criteria.incrementCondition(contrastRatio) ? d : -d;\n    }\n\n    const nearlestColor = ColorContrastCalc.newHslColor([h, s, l]);\n\n    if (lastSufficientLightness && nearlestColor.contrastRatioAgainst(this) < targetRatio) {\n      return ColorContrastCalc.newHslColor([h, s, lastSufficientLightness]);\n    }\n\n    return nearlestColor;\n  }\n\n  /**\n   * @private\n   */\n  shouldScanDarkerSide(otherColor) {\n    if (this.isBrighterThan(otherColor) ||\n        this.isSameColor(otherColor) && this.isLightColor()) {\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * @private\n   */\n  lightnessBoundaryColor(max, min, level) {\n    if (min === 0 && ! this.hasSufficientContrast(this.BLACK, level)) {\n      return this.BLACK;\n    }\n\n    if (max === 100 && ! this.hasSufficientContrast(this.WHITE, level)) {\n      return this.WHITE;\n    }\n\n    return null;\n  }\n\n  /**\n   * @param {ColorContrastCalc} otherColor\n   * @returns {string} A, AA or AAA if the contrast ratio meets the criteria of WCAG 2.0, otherwise \"-\"\n   */\n  contrastLevel(otherColor) {\n    const ratio = this.contrastRatioAgainst(otherColor);\n    if (ratio >= 7) {\n      return \"AAA\";\n    } else if (ratio >= 4.5) {\n      return \"AA\";\n    } else if (ratio >= 3) {\n      return \"A\";\n    }\n\n    return \"-\";\n  }\n\n  /**\n   * Checks if the contrast ratio between the base color and otherColor meets the requirement of WCAG 2.0\n   * @param {ColorContrastCalc} otherColor\n   * @param {string} [level=\"AA\"] - A, AA or AAA\n   * @returns {boolean}\n   */\n  hasSufficientContrast(otherColor, level = \"AA\") {\n    const ratio = this.levelToContrastRatio(level);\n    return this.contrastRatioAgainst(otherColor) >= ratio;\n  }\n\n  /**\n   * Checks if the base color and otherColor have the same RGB value\n   * @param {ColorContrastCalc} otherColor\n   * @returns {boolean}\n   */\n  isSameColor(otherColor) {\n    return this.hexCode === otherColor.hexCode;\n  }\n\n  /**\n   * @returns {boolean} true if each primary color of the base color is 0 or 255\n   */\n  isMaxContrast() {\n    const limits = [0, 255];\n    return this.rgb.every(primaryColor => limits.includes(primaryColor));\n  }\n\n  /**\n   * @returns {boolean} true if the hex code of the color is #808080\n   */\n  isMinContrast() {\n    return this.rgb.every((primaryColor, i) => {\n      return this.GRAY.rgb[i] === primaryColor;\n    });\n  }\n\n  /**\n   * Returns a string representation of the color.\n   * When 16 is passed, it return the hex code, and when 10 is passed, it returns the value in RGB notation\n   * Otherwise, it returns the color name or the hex code\n   * @param {number|null} [base=16] - 16, 10 or null\n   * @returns {string}\n   */\n  toString(base = 16) {\n    switch (base) {\n    case 16:\n      return this.hexCode;\n    case 10:\n      return `rgb(${this.rgb.join(\",\")})`;\n    default:\n      return this.name || this.hexCode;\n    }\n  }\n\n  /**\n   * @private\n   */\n  levelToContrastRatio(level) {\n    if (level === \"A\" || level === 1) {\n      return 3.0;\n    } else if (level === \"AA\" || level === 2) {\n      return 4.5;\n    } else if (level === \"AAA\" || level === 3) {\n      return 7.0;\n    }\n  }\n\n  /**\n   * @private\n   */\n  calcBrightnessRatio(otherColor, targetRatio, criteria, w) {\n    const otherRgb = otherColor.rgb;\n    let r = w;\n    let lastSufficentRatio = null;\n\n    for (let d of ColorContrastCalc.binarySearchWidth(w, 0.01)) {\n      const newRgb = Utils.BrightnessCalc.calcRgb(otherRgb, r);\n      const contrastRatio = this.calcContrastRatio(newRgb);\n\n      if (contrastRatio >= targetRatio) { lastSufficentRatio = r; }\n      if (contrastRatio === targetRatio) { break; }\n      r += criteria.incrementCondition(contrastRatio) ? d : -d;\n    }\n\n    return [r, lastSufficentRatio];\n  }\n\n  /**\n   * @private\n   */\n  calcContrastRatio(otherRgb) {\n    const otherLuminance = ColorContrastCalc.relativeLuminance(otherRgb);\n    return ColorContrastCalc.luminanceToContrastRatio(this.relativeLuminance,\n                                                      otherLuminance);\n  }\n\n\n  /**\n   * @private\n   */\n  calcUpperRatioLimit() {\n    if (this.isSameColor(this.BLACK)) {\n      return 100;\n    }\n\n    const darkest = this.rgb\n            .filter(c => c !== 0)\n            .reduce((a, b) => Math.min(a, b));\n    return Math.ceil((255 / darkest) * 100);\n  }\n\n  /**\n   * @private\n   */\n  brightnessThresholdCriteria(targetRatio, otherColor) {\n    const criteria = {};\n\n    if (this.isBrighterThan(otherColor) ||\n        this.hasSameLuminance(otherColor) && this.isLightColor()) {\n      criteria.round = (r) => Math.floor(r * 10 ) / 10;\n      criteria.incrementCondition = (contrastRatio) => contrastRatio > targetRatio;\n    } else {\n      criteria.round = (r) => Math.ceil(r * 10) / 10;\n      criteria.incrementCondition = (contrastRatio) => targetRatio > contrastRatio;\n    }\n\n    return criteria;\n  }\n\n  /**\n   * @param {ColorContrastCalc} otherColor\n   * @returns {boolean} true if the relative luminance of the base color is greater than that of otherColor\n   */\n  isBrighterThan(otherColor) {\n    return this.relativeLuminance > otherColor.relativeLuminance;\n  }\n\n  /**\n   * @param {ColorContrastCalc} otherColor\n   * @returns {boolean} true if the relative luminance of the base color is equal to that of otherColor\n   */\n  hasSameLuminance(otherColor) {\n    return this.relativeLuminance === otherColor.relativeLuminance;\n  }\n\n  /**\n   * @returns {boolean} true if the contrast ratio against white is qual to/ less than the ratio against black\n   */\n  isLightColor() {\n    return this.WHITE.contrastRatioAgainst(this) <= this.BLACK.contrastRatioAgainst(this);\n  }\n\n  /**\n   * @private\n   */\n  freezeProperties() {\n    Object.freeze(this.rgb);\n    Object.freeze(this.relativeLuminance);\n    Object.freeze(this.name);\n    Object.freeze(this.hexCode);\n  }\n\n  /**\n   * @private\n   */\n  generateNewColor(calc, ratio, name = null) {\n    const newRgb = calc.calcRgb(this.rgb, ratio);\n    return new ColorContrastCalc(newRgb, name);\n  }\n}\n\nColorContrastCalc.binarySearchWidth = function*(initWidth, min) {\n  let i = 1;\n  let d = initWidth / Math.pow(2, i);\n\n  while (d > min) {\n    yield d;\n    i++;\n    d = initWidth / Math.pow(2, i);\n  }\n};\n\n(function() {\n  class Sorter {\n    static sort(colors, colorOrder = \"rgb\", keyMapper = null, mode = \"auto\") {\n      const keyType = this.guessKeyType(mode, colors[0], keyMapper);\n      const compare = this.compareFunction(colorOrder, keyType, keyMapper);\n\n      return colors.slice().sort(compare);\n    }\n\n    static compareFunction(colorOrder = \"rgb\",\n                           keyType = this.KEY_TYPE.COLOR,\n                           keyMapper = null) {\n      let compare = null;\n\n      if (keyType === this.KEY_TYPE.HEX) {\n        compare = this.compareHexFunction(colorOrder);\n      } else if (this.isComponentType(keyType)) {\n        compare = this.compareComponentsFunction(colorOrder);\n      } else {\n        compare = this.compareColorFunction(colorOrder);\n      }\n\n      return this.composeFunction(compare, keyMapper);\n    }\n\n    static composeFunction(compareFunc, keyMapper = null) {\n      if (! keyMapper) {\n        return compareFunc;\n      }\n\n      return function(color1, color2) {\n        return compareFunc(keyMapper(color1), keyMapper(color2));\n      };\n    }\n\n    static guessKeyType(mode, color, keyMapper) {\n      if (mode === this.KEY_TYPE.HEX ||\n          mode === \"auto\" && this.isStringKey(color, keyMapper)) {\n        return this.KEY_TYPE.HEX;\n      } else if (this.isComponentType(mode) || Array.isArray(color)) {\n        return this.KEY_TYPE.COMPONENTS;\n      } else {\n        return this.KEY_TYPE.COLOR;\n      }\n    }\n\n    static isComponentType(keyType) {\n      return [\n        this.KEY_TYPE.RGB,\n        this.KEY_TYPE.HSL,\n        this.KEY_TYPE.COMPONENTS\n      ].includes(keyType);\n    }\n\n    static isStringKey(color, keyMapper) {\n      const keyType = keyMapper ? keyMapper(color) : color;\n      return Utils.isString(keyType);\n    }\n\n    static compareColorFunction(colorOrder = \"rgb\") {\n      const order = this.parseColorOrder(colorOrder);\n      const type = order.type;\n\n      return function(color1, color2) {\n        return Sorter.compareColorComponents(color1[type], color2[type], order);\n      };\n    }\n\n    static compareComponentsFunction(colorOrder = \"rgb\") {\n      const order = this.parseColorOrder(colorOrder);\n\n      return function(rgb1, rgb2) {\n        return Sorter.compareColorComponents(rgb1, rgb2, order);\n      };\n    }\n\n    static compareHexFunction(colorOrder = \"rgb\") {\n      const order = this.parseColorOrder(colorOrder);\n      const componentsCache = new Map();\n\n      return function(hex1, hex2) {\n        const color1 = Sorter.hexToComponents(hex1, order, componentsCache);\n        const color2 = Sorter.hexToComponents(hex2, order, componentsCache);\n\n        return Sorter.compareColorComponents(color1, color2, order);\n      };\n    }\n\n    static compareColorComponents(color1, color2,\n                                  order = this.parseColorOrder(\"rgb\")) {\n      for (let i of order.pos) {\n        const result = order.funcs[i](color1[i], color2[i]);\n        if (result !== 0) { return result; }\n      }\n\n      return 0;\n    }\n\n    static hexToComponents(hex, order, cache) {\n      const cachedComponents = cache.get(hex);\n      if (cachedComponents) { return cachedComponents; }\n\n      const components = order.toComponents(hex);\n      cache.set(hex, components);\n\n      return components;\n    }\n\n    static rgbComponentPos(colorOrder) {\n      return colorOrder.toLowerCase().split(\"\").map((primary) => {\n        return this.RGB_IDENTIFIERS.indexOf(primary);\n      });\n    }\n\n    static hslComponentPos(hslOrder) {\n      return hslOrder.toLowerCase().split(\"\").map(component => {\n        return this.HSL_IDENTIFIERS.indexOf(component);\n      });\n    }\n\n    static ascendComp(component1, component2) {\n      return component1 - component2;\n    }\n\n    static descendComp(component1, component2) {\n      return component2 - component1;\n    }\n\n    static chooseRgbCompFunc(colorOrder) {\n      const primaryColors = colorOrder.split(\"\")\n              .sort(this.caseInsensitiveComp).reverse();\n\n      return primaryColors.map(primary => {\n        if (Utils.isUpperCase(primary)) {\n          return this.descendComp;\n        }\n\n        return this.ascendComp;\n      });\n    }\n\n    static chooseHslCompFunc(hslOrder) {\n      return this.HSL_RES.map(re => {\n        const pos = hslOrder.search(re);\n        if (Utils.isUpperCase(hslOrder[pos])) {\n          return this.descendComp;\n        }\n\n        return this.ascendComp;\n      });\n    }\n\n    static parseColorOrder(colorOrder) {\n      if (/[rgb]{3}/i.test(colorOrder)) {\n        return {\n          pos: this.rgbComponentPos(colorOrder),\n          funcs: this.chooseRgbCompFunc(colorOrder),\n          toComponents: hexCode => Utils.hexCodeToDecimal(hexCode),\n          type: \"rgb\"\n        };\n      } else {\n        return {\n          pos: this.hslComponentPos(colorOrder),\n          funcs: this.chooseHslCompFunc(colorOrder),\n          toComponents: hexCode => Utils.hexCodeToHsl(hexCode),\n          type: \"hsl\"\n        };\n      }\n    }\n\n    static caseInsensitiveComp(str1, str2) {\n      const lStr1 = str1.toLowerCase();\n      const lStr2 = str2.toLowerCase();\n\n      if (lStr1 < lStr2) { return -1; }\n      if (lStr1 > lStr2) { return 1; }\n      return 0;\n    }\n\n    static setup() {\n      this.RGB_IDENTIFIERS = [\"r\", \"g\", \"b\"];\n      this.HSL_IDENTIFIERS = [\"h\", \"s\", \"l\"];\n      this.HSL_RES = [/h/i, /s/i, /l/i];\n      this.defaultCompFuncs = [\n        Sorter.ascendComp,\n        Sorter.ascendComp,\n        Sorter.ascendComp\n      ];\n      this.KEY_TYPE = {\n        COMPONENTS: \"components\",\n        RGB: \"rgb\",\n        HSL: \"hsl\",\n        HEX: \"hex\",\n        COLOR: \"color\"\n      };\n    }\n  }\n\n  Sorter.setup();\n\n  ColorContrastCalc.Sorter = Sorter;\n})();\n\nColorContrastCalc.setup(require(\"./color-keywords.json\"));\n\nmodule.exports.ColorUtils = ColorUtils;\nmodule.exports.ColorContrastCalc = ColorContrastCalc;\n",
    "static": true,
    "longname": "/home/naoki/2017/170506/color-contrast-calc/lib/color-contrast-calc.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "variable",
    "name": "ColorUtils",
    "memberof": "lib/color-contrast-calc.js",
    "static": true,
    "longname": "lib/color-contrast-calc.js~ColorUtils",
    "access": "public",
    "export": false,
    "importPath": "color-contrast-calc/lib/color-contrast-calc.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 50,
    "kind": "variable",
    "name": "Utils",
    "memberof": "lib/color-contrast-calc.js",
    "static": true,
    "longname": "lib/color-contrast-calc.js~Utils",
    "access": "public",
    "export": false,
    "importPath": "color-contrast-calc/lib/color-contrast-calc.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 51,
    "kind": "function",
    "name": "binarySearchWidth",
    "memberof": "lib/color-contrast-calc.js",
    "generator": true,
    "async": false,
    "static": true,
    "longname": "lib/color-contrast-calc.js~binarySearchWidth",
    "access": "public",
    "export": false,
    "importPath": "color-contrast-calc/lib/color-contrast-calc.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 574,
    "undocument": true,
    "params": [
      {
        "name": "initWidth",
        "types": [
          "*"
        ]
      },
      {
        "name": "min",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 52,
    "kind": "class",
    "name": "ColorContrastCalc",
    "memberof": "lib/color-contrast-calc.js",
    "static": true,
    "longname": "lib/color-contrast-calc.js~ColorContrastCalc",
    "access": "public",
    "export": true,
    "importPath": "color-contrast-calc/lib/color-contrast-calc.js",
    "importStyle": "{ColorContrastCalc}",
    "description": "Provides methods to calculate RGB colors.\nAn instance represents a RGB color.",
    "lineNumber": 10,
    "interface": false
  },
  {
    "__docId__": 53,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/color-contrast-calc.js~ColorContrastCalc",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/color-contrast-calc.js~ColorContrastCalc#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 15,
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "Array<number, number, number>"
        ],
        "spread": false,
        "optional": false,
        "name": "rgb",
        "description": "RGB value represented as a string (hex code) or an array of numbers"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "null",
        "defaultRaw": null,
        "name": "name",
        "description": "the value of this.name: if null, the value of this.hexCode is set to this.name instead"
      }
    ]
  },
  {
    "__docId__": 54,
    "kind": "member",
    "name": "rgb",
    "memberof": "lib/color-contrast-calc.js~ColorContrastCalc",
    "static": false,
    "longname": "lib/color-contrast-calc.js~ColorContrastCalc#rgb",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "properties": [
      {
        "nullable": null,
        "types": [
          "Array<number, number, number>"
        ],
        "spread": false,
        "optional": false,
        "name": "rgb",
        "description": "RGB value repsented as an array of decimal numbers"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 55,
    "kind": "member",
    "name": "relativeLuminance",
    "memberof": "lib/color-contrast-calc.js~ColorContrastCalc",
    "static": false,
    "longname": "lib/color-contrast-calc.js~ColorContrastCalc#relativeLuminance",
    "access": "public",
    "description": null,
    "lineNumber": 20,
    "properties": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "relativeLuminance",
        "description": "The relative luminance of the color"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 56,
    "kind": "member",
    "name": "name",
    "memberof": "lib/color-contrast-calc.js~ColorContrastCalc",
    "static": false,
    "longname": "lib/color-contrast-calc.js~ColorContrastCalc#name",
    "access": "public",
    "description": null,
    "lineNumber": 22,
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "If no name is explicitely given, the property is set to the value of this.hexCode"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 57,
    "kind": "member",
    "name": "hexCode",
    "memberof": "lib/color-contrast-calc.js~ColorContrastCalc",
    "static": false,
    "longname": "lib/color-contrast-calc.js~ColorContrastCalc#hexCode",
    "access": "public",
    "description": null,
    "lineNumber": 24,
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "hexCode",
        "description": "The RGB value in hex code notation"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 58,
    "kind": "member",
    "name": "_hsl",
    "memberof": "lib/color-contrast-calc.js~ColorContrastCalc",
    "static": false,
    "longname": "lib/color-contrast-calc.js~ColorContrastCalc#_hsl",
    "access": "private",
    "description": null,
    "lineNumber": 27,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 59,
    "kind": "method",
    "name": "tristimulusValue",
    "memberof": "lib/color-contrast-calc.js~ColorContrastCalc",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/color-contrast-calc.js~ColorContrastCalc.tristimulusValue",
    "access": "private",
    "description": "",
    "lineNumber": 33,
    "ignore": true,
    "params": [
      {
        "name": "primaryColor",
        "types": [
          "*"
        ]
      },
      {
        "name": "base",
        "optional": true,
        "types": [
          "number"
        ],
        "defaultRaw": 255,
        "defaultValue": "255"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 60,
    "kind": "method",
    "name": "relativeLuminance",
    "memberof": "lib/color-contrast-calc.js~ColorContrastCalc",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/color-contrast-calc.js~ColorContrastCalc.relativeLuminance",
    "access": "public",
    "description": "Calculate the relative luminance of a RGB color given as a string or an array of numbers",
    "lineNumber": 47,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} Relative luminance"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "Array<number, number, number>"
        ],
        "spread": false,
        "optional": false,
        "name": "rgb",
        "description": "RGB value represented as a string (hex code) or an array of numbers"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "Relative luminance"
    }
  },
  {
    "__docId__": 61,
    "kind": "method",
    "name": "contrastRatio",
    "memberof": "lib/color-contrast-calc.js~ColorContrastCalc",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/color-contrast-calc.js~ColorContrastCalc.contrastRatio",
    "access": "public",
    "description": "Calculate the contrast ratio of given colors",
    "lineNumber": 60,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} Contrast ratio"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "Array<number, number, number>"
        ],
        "spread": false,
        "optional": false,
        "name": "foreground",
        "description": "RGB value represented as a string (hex code) or an array of numbers"
      },
      {
        "nullable": null,
        "types": [
          "string",
          "Array<number, number, number>"
        ],
        "spread": false,
        "optional": false,
        "name": "background",
        "description": "RGB value represented as a string (hex code) or an array of numbers"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "Contrast ratio"
    }
  },
  {
    "__docId__": 62,
    "kind": "method",
    "name": "getByName",
    "memberof": "lib/color-contrast-calc.js~ColorContrastCalc",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/color-contrast-calc.js~ColorContrastCalc.getByName",
    "access": "public",
    "description": "Returns an instance of ColorContrastCalc for a predefined color name.",
    "lineNumber": 71,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ColorContrastCalc}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "names are defined at https://www.w3.org/TR/SVG/types.html#ColorKeywords"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ColorContrastCalc"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 63,
    "kind": "method",
    "name": "getByHexCode",
    "memberof": "lib/color-contrast-calc.js~ColorContrastCalc",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/color-contrast-calc.js~ColorContrastCalc.getByHexCode",
    "access": "public",
    "description": "Returns an instance of ColorContrastCalc for a hex code",
    "lineNumber": 80,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ColorContrastCalc}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "code",
        "description": "RGB value in hex code"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ColorContrastCalc"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 64,
    "kind": "method",
    "name": "compareFunction",
    "memberof": "lib/color-contrast-calc.js~ColorContrastCalc",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/color-contrast-calc.js~ColorContrastCalc.compareFunction",
    "access": "public",
    "description": "Returns a function to be used as a parameter of Array.prototype.sort()",
    "lineNumber": 93,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{function} Function that compares given two colors"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"rgb\"",
        "defaultRaw": "rgb",
        "name": "colorOrder",
        "description": "A left side primary color has a higher sorting precedence"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"color\"",
        "defaultRaw": "color",
        "name": "keyType",
        "description": "Type of keys used for sorting: \"color\", \"hex\" or \"rgb\""
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "null",
        "defaultRaw": null,
        "name": "keyMapper",
        "description": "A function used to retrive key values from elements to be sorted"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "function"
      ],
      "spread": false,
      "description": "Function that compares given two colors"
    }
  },
  {
    "__docId__": 65,
    "kind": "method",
    "name": "sort",
    "memberof": "lib/color-contrast-calc.js~ColorContrastCalc",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/color-contrast-calc.js~ColorContrastCalc.sort",
    "access": "public",
    "description": "Sorts colors in an array and returns the result as a new array",
    "lineNumber": 105,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ColorContrastCalc[]} An array of sorted colors"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "ColorContrastCalc[]",
          "String[]"
        ],
        "spread": false,
        "optional": false,
        "name": "colors",
        "description": "List of colors"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"rgb\"",
        "defaultRaw": "rgb",
        "name": "colorOrder",
        "description": "A left side primary color has a higher sorting precedence, and an uppercase letter means descending order"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "null",
        "defaultRaw": null,
        "name": "keyMapper",
        "description": "A function used to retrive key values from elements to be sorted"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"auto\"",
        "defaultRaw": "auto",
        "name": "mode",
        "description": "If set to \"hex\", key values are handled as hex code strings"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ColorContrastCalc[]"
      ],
      "spread": false,
      "description": "An array of sorted colors"
    }
  },
  {
    "__docId__": 66,
    "kind": "method",
    "name": "newHslColor",
    "memberof": "lib/color-contrast-calc.js~ColorContrastCalc",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/color-contrast-calc.js~ColorContrastCalc.newHslColor",
    "access": "public",
    "description": "Creates an instance of ColorContractCalc from an HSL value",
    "lineNumber": 114,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ColorContrastCalc} An instance of ColorContrastCalc"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<number,number, number>"
        ],
        "spread": false,
        "optional": false,
        "name": "hsl",
        "description": "an array of numbers that represents an HSL value"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ColorContrastCalc"
      ],
      "spread": false,
      "description": "An instance of ColorContrastCalc"
    }
  },
  {
    "__docId__": 67,
    "kind": "method",
    "name": "luminanceToContrastRatio",
    "memberof": "lib/color-contrast-calc.js~ColorContrastCalc",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/color-contrast-calc.js~ColorContrastCalc.luminanceToContrastRatio",
    "access": "private",
    "description": "",
    "lineNumber": 121,
    "ignore": true,
    "params": [
      {
        "name": "luminance1",
        "types": [
          "*"
        ]
      },
      {
        "name": "luminance2",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 68,
    "kind": "method",
    "name": "setup",
    "memberof": "lib/color-contrast-calc.js~ColorContrastCalc",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/color-contrast-calc.js~ColorContrastCalc.setup",
    "access": "private",
    "description": "",
    "lineNumber": 130,
    "ignore": true,
    "params": [
      {
        "name": "colorKeywordsJSON",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 69,
    "kind": "method",
    "name": "loadColorKeywords",
    "memberof": "lib/color-contrast-calc.js~ColorContrastCalc",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/color-contrast-calc.js~ColorContrastCalc.loadColorKeywords",
    "access": "private",
    "description": "",
    "lineNumber": 140,
    "ignore": true,
    "params": [
      {
        "name": "colorKeywordsJSON",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 70,
    "kind": "member",
    "name": "NAMED_COLORS",
    "memberof": "lib/color-contrast-calc.js~ColorContrastCalc",
    "static": true,
    "longname": "lib/color-contrast-calc.js~ColorContrastCalc.NAMED_COLORS",
    "access": "public",
    "description": "Array of named colors defined at https://www.w3.org/TR/SVG/types.html#ColorKeywords",
    "lineNumber": 145,
    "properties": [
      {
        "nullable": null,
        "types": [
          "ColorContrastCalc[]"
        ],
        "spread": false,
        "optional": false,
        "name": "NAMED_COLORS",
        "description": ""
      }
    ],
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 71,
    "kind": "member",
    "name": "NAME_TO_COLOR",
    "memberof": "lib/color-contrast-calc.js~ColorContrastCalc",
    "static": true,
    "longname": "lib/color-contrast-calc.js~ColorContrastCalc.NAME_TO_COLOR",
    "access": "private",
    "description": null,
    "lineNumber": 147,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 72,
    "kind": "member",
    "name": "HEX_TO_COLOR",
    "memberof": "lib/color-contrast-calc.js~ColorContrastCalc",
    "static": true,
    "longname": "lib/color-contrast-calc.js~ColorContrastCalc.HEX_TO_COLOR",
    "access": "private",
    "description": null,
    "lineNumber": 149,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 73,
    "kind": "method",
    "name": "assignColorConstants",
    "memberof": "lib/color-contrast-calc.js~ColorContrastCalc",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/color-contrast-calc.js~ColorContrastCalc.assignColorConstants",
    "access": "private",
    "description": "",
    "lineNumber": 164,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 74,
    "kind": "member",
    "name": "BLACK",
    "memberof": "lib/color-contrast-calc.js~ColorContrastCalc",
    "static": true,
    "longname": "lib/color-contrast-calc.js~ColorContrastCalc.BLACK",
    "access": "public",
    "description": null,
    "lineNumber": 166,
    "properties": [
      {
        "nullable": null,
        "types": [
          "ColorContrastCalc"
        ],
        "spread": false,
        "optional": false,
        "name": "BLACK",
        "description": "an instance that represents #000000"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 75,
    "kind": "member",
    "name": "WHITE",
    "memberof": "lib/color-contrast-calc.js~ColorContrastCalc",
    "static": true,
    "longname": "lib/color-contrast-calc.js~ColorContrastCalc.WHITE",
    "access": "public",
    "description": null,
    "lineNumber": 168,
    "properties": [
      {
        "nullable": null,
        "types": [
          "ColorContrastCalc"
        ],
        "spread": false,
        "optional": false,
        "name": "WHITE",
        "description": "an instance that represents #ffffff"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 76,
    "kind": "member",
    "name": "GRAY",
    "memberof": "lib/color-contrast-calc.js~ColorContrastCalc",
    "static": true,
    "longname": "lib/color-contrast-calc.js~ColorContrastCalc.GRAY",
    "access": "public",
    "description": null,
    "lineNumber": 170,
    "properties": [
      {
        "nullable": null,
        "types": [
          "ColorContrastCalc"
        ],
        "spread": false,
        "optional": false,
        "name": "GRAY",
        "description": "an instance that represents #808080"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 77,
    "kind": "method",
    "name": "generateWebSafeColors",
    "memberof": "lib/color-contrast-calc.js~ColorContrastCalc",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/color-contrast-calc.js~ColorContrastCalc.generateWebSafeColors",
    "access": "private",
    "description": "",
    "lineNumber": 179,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 78,
    "kind": "member",
    "name": "WEB_SAFE_COLORS",
    "memberof": "lib/color-contrast-calc.js~ColorContrastCalc",
    "static": true,
    "longname": "lib/color-contrast-calc.js~ColorContrastCalc.WEB_SAFE_COLORS",
    "access": "public",
    "description": "Array of web safe colors",
    "lineNumber": 184,
    "properties": [
      {
        "nullable": null,
        "types": [
          "ColorContrastCalc[]"
        ],
        "spread": false,
        "optional": false,
        "name": "WEB_SAFE_COLORS",
        "description": ""
      }
    ],
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 79,
    "kind": "get",
    "name": "hsl",
    "memberof": "lib/color-contrast-calc.js~ColorContrastCalc",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/color-contrast-calc.js~ColorContrastCalc#hsl",
    "access": "public",
    "description": "",
    "lineNumber": 201,
    "properties": [
      {
        "nullable": null,
        "types": [
          "Array<number, number, number>"
        ],
        "spread": false,
        "optional": false,
        "name": "hsl",
        "description": "HSL value repsented as an array of decimal numbers"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 81,
    "kind": "method",
    "name": "contrastRatioAgainst",
    "memberof": "lib/color-contrast-calc.js~ColorContrastCalc",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/color-contrast-calc.js~ColorContrastCalc#contrastRatioAgainst",
    "access": "public",
    "description": "Calculate the contrast ratio against another color",
    "lineNumber": 212,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "ColorContrastCalc",
          "string",
          "Array<number, number, number>"
        ],
        "spread": false,
        "optional": false,
        "name": "color",
        "description": "another instance of ColorContrastCalc or a RGB value"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 82,
    "kind": "method",
    "name": "colorsWithSufficientContrast",
    "memberof": "lib/color-contrast-calc.js~ColorContrastCalc",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/color-contrast-calc.js~ColorContrastCalc#colorsWithSufficientContrast",
    "access": "public",
    "description": "Returns an array of named colors that satisfy a given level of contrast ratio",
    "lineNumber": 228,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ColorContrastCalc[]}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"AA\"",
        "defaultRaw": "AA",
        "name": "level",
        "description": "A, AA or AAA"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ColorContrastCalc[]"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 83,
    "kind": "method",
    "name": "newContrastColor",
    "memberof": "lib/color-contrast-calc.js~ColorContrastCalc",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/color-contrast-calc.js~ColorContrastCalc#newContrastColor",
    "access": "public",
    "description": "",
    "lineNumber": 241,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ColorContrastCalc}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "ratio",
        "description": "Value in percent"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "null",
        "defaultRaw": null,
        "name": "name",
        "description": "Name of color"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ColorContrastCalc"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 84,
    "kind": "method",
    "name": "newBrightnessColor",
    "memberof": "lib/color-contrast-calc.js~ColorContrastCalc",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/color-contrast-calc.js~ColorContrastCalc#newBrightnessColor",
    "access": "public",
    "description": "",
    "lineNumber": 250,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ColorContrastCalc}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "ratio",
        "description": "Value in percent"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "null",
        "defaultRaw": null,
        "name": "name",
        "description": "Name of color"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ColorContrastCalc"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 85,
    "kind": "method",
    "name": "newInvertColor",
    "memberof": "lib/color-contrast-calc.js~ColorContrastCalc",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/color-contrast-calc.js~ColorContrastCalc#newInvertColor",
    "access": "public",
    "description": "",
    "lineNumber": 259,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ColorContrastCalc}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "ratio",
        "description": "Value in percent"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "null",
        "defaultRaw": null,
        "name": "name",
        "description": "Name of color"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ColorContrastCalc"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 86,
    "kind": "method",
    "name": "newHueRotateColor",
    "memberof": "lib/color-contrast-calc.js~ColorContrastCalc",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/color-contrast-calc.js~ColorContrastCalc#newHueRotateColor",
    "access": "public",
    "description": "",
    "lineNumber": 268,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ColorContrastCalc}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "degree",
        "description": "Value in degree"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "null",
        "defaultRaw": null,
        "name": "name",
        "description": "Name of color"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ColorContrastCalc"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 87,
    "kind": "method",
    "name": "newSaturateColor",
    "memberof": "lib/color-contrast-calc.js~ColorContrastCalc",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/color-contrast-calc.js~ColorContrastCalc#newSaturateColor",
    "access": "public",
    "description": "",
    "lineNumber": 277,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ColorContrastCalc}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "ratio",
        "description": "Value in percent"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "null",
        "defaultRaw": null,
        "name": "name",
        "description": "Name of color"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ColorContrastCalc"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 88,
    "kind": "method",
    "name": "newGrayscaleColor",
    "memberof": "lib/color-contrast-calc.js~ColorContrastCalc",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/color-contrast-calc.js~ColorContrastCalc#newGrayscaleColor",
    "access": "public",
    "description": "",
    "lineNumber": 286,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ColorContrastCalc}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "ratio",
        "description": "Value in percent"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "null",
        "defaultRaw": null,
        "name": "name",
        "description": "Name of color"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ColorContrastCalc"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 89,
    "kind": "method",
    "name": "findBrightnessThreshold",
    "memberof": "lib/color-contrast-calc.js~ColorContrastCalc",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/color-contrast-calc.js~ColorContrastCalc#findBrightnessThreshold",
    "access": "public",
    "description": "Tries to find a color whose contrast against the base color is close to a given level.\n\nThe returned color is gained by modifying the brightness of otherColor.\nEven when a color that satisfies the level is not found, it returns a new color anyway.",
    "lineNumber": 299,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ColorContrastCalc} A color whose contrast against the base color is close to a specified level"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "ColorContrastCalc"
        ],
        "spread": false,
        "optional": false,
        "name": "otherColor",
        "description": "The color before the modification of brightness"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"AA\"",
        "defaultRaw": "AA",
        "name": "level",
        "description": "A, AA or AAA"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ColorContrastCalc"
      ],
      "spread": false,
      "description": "A color whose contrast against the base color is close to a specified level"
    }
  },
  {
    "__docId__": 90,
    "kind": "method",
    "name": "findLightnessThreshold",
    "memberof": "lib/color-contrast-calc.js~ColorContrastCalc",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/color-contrast-calc.js~ColorContrastCalc#findLightnessThreshold",
    "access": "public",
    "description": "Tries to find a color whose contrast against the base color is close to a given level.\n\nThe returned color is gained by modifying the lightness of otherColor.\nEven when a color that satisfies the level is not found, it returns a new color anyway.",
    "lineNumber": 329,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ColorContrastCalc} A color whose contrast against the base color is close to a specified level"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "ColorContrastCalc"
        ],
        "spread": false,
        "optional": false,
        "name": "otherColor",
        "description": "The color before the modification of lightness"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"AA\"",
        "defaultRaw": "AA",
        "name": "level",
        "description": "A, AA or AAA"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ColorContrastCalc"
      ],
      "spread": false,
      "description": "A color whose contrast against the base color is close to a specified level"
    }
  },
  {
    "__docId__": 91,
    "kind": "method",
    "name": "shouldScanDarkerSide",
    "memberof": "lib/color-contrast-calc.js~ColorContrastCalc",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/color-contrast-calc.js~ColorContrastCalc#shouldScanDarkerSide",
    "access": "private",
    "description": "",
    "lineNumber": 362,
    "ignore": true,
    "params": [
      {
        "name": "otherColor",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 92,
    "kind": "method",
    "name": "lightnessBoundaryColor",
    "memberof": "lib/color-contrast-calc.js~ColorContrastCalc",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/color-contrast-calc.js~ColorContrastCalc#lightnessBoundaryColor",
    "access": "private",
    "description": "",
    "lineNumber": 373,
    "ignore": true,
    "params": [
      {
        "name": "max",
        "types": [
          "*"
        ]
      },
      {
        "name": "min",
        "types": [
          "*"
        ]
      },
      {
        "name": "level",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 93,
    "kind": "method",
    "name": "contrastLevel",
    "memberof": "lib/color-contrast-calc.js~ColorContrastCalc",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/color-contrast-calc.js~ColorContrastCalc#contrastLevel",
    "access": "public",
    "description": "",
    "lineNumber": 389,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} A, AA or AAA if the contrast ratio meets the criteria of WCAG 2.0, otherwise \"-\""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "ColorContrastCalc"
        ],
        "spread": false,
        "optional": false,
        "name": "otherColor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "A, AA or AAA if the contrast ratio meets the criteria of WCAG 2.0, otherwise \"-\""
    }
  },
  {
    "__docId__": 94,
    "kind": "method",
    "name": "hasSufficientContrast",
    "memberof": "lib/color-contrast-calc.js~ColorContrastCalc",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/color-contrast-calc.js~ColorContrastCalc#hasSufficientContrast",
    "access": "public",
    "description": "Checks if the contrast ratio between the base color and otherColor meets the requirement of WCAG 2.0",
    "lineNumber": 408,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "ColorContrastCalc"
        ],
        "spread": false,
        "optional": false,
        "name": "otherColor",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"AA\"",
        "defaultRaw": "AA",
        "name": "level",
        "description": "A, AA or AAA"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 95,
    "kind": "method",
    "name": "isSameColor",
    "memberof": "lib/color-contrast-calc.js~ColorContrastCalc",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/color-contrast-calc.js~ColorContrastCalc#isSameColor",
    "access": "public",
    "description": "Checks if the base color and otherColor have the same RGB value",
    "lineNumber": 418,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "ColorContrastCalc"
        ],
        "spread": false,
        "optional": false,
        "name": "otherColor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 96,
    "kind": "method",
    "name": "isMaxContrast",
    "memberof": "lib/color-contrast-calc.js~ColorContrastCalc",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/color-contrast-calc.js~ColorContrastCalc#isMaxContrast",
    "access": "public",
    "description": "",
    "lineNumber": 425,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} true if each primary color of the base color is 0 or 255"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "true if each primary color of the base color is 0 or 255"
    },
    "params": []
  },
  {
    "__docId__": 97,
    "kind": "method",
    "name": "isMinContrast",
    "memberof": "lib/color-contrast-calc.js~ColorContrastCalc",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/color-contrast-calc.js~ColorContrastCalc#isMinContrast",
    "access": "public",
    "description": "",
    "lineNumber": 433,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} true if the hex code of the color is #808080"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "true if the hex code of the color is #808080"
    },
    "params": []
  },
  {
    "__docId__": 98,
    "kind": "method",
    "name": "toString",
    "memberof": "lib/color-contrast-calc.js~ColorContrastCalc",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/color-contrast-calc.js~ColorContrastCalc#toString",
    "access": "public",
    "description": "Returns a string representation of the color.\nWhen 16 is passed, it return the hex code, and when 10 is passed, it returns the value in RGB notation\nOtherwise, it returns the color name or the hex code",
    "lineNumber": 446,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number",
          "null"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "16",
        "defaultRaw": 16,
        "name": "base",
        "description": "16, 10 or null"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 99,
    "kind": "method",
    "name": "levelToContrastRatio",
    "memberof": "lib/color-contrast-calc.js~ColorContrastCalc",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/color-contrast-calc.js~ColorContrastCalc#levelToContrastRatio",
    "access": "private",
    "description": "",
    "lineNumber": 460,
    "ignore": true,
    "params": [
      {
        "name": "level",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 100,
    "kind": "method",
    "name": "calcBrightnessRatio",
    "memberof": "lib/color-contrast-calc.js~ColorContrastCalc",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/color-contrast-calc.js~ColorContrastCalc#calcBrightnessRatio",
    "access": "private",
    "description": "",
    "lineNumber": 473,
    "ignore": true,
    "params": [
      {
        "name": "otherColor",
        "types": [
          "*"
        ]
      },
      {
        "name": "targetRatio",
        "types": [
          "*"
        ]
      },
      {
        "name": "criteria",
        "types": [
          "*"
        ]
      },
      {
        "name": "w",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 101,
    "kind": "method",
    "name": "calcContrastRatio",
    "memberof": "lib/color-contrast-calc.js~ColorContrastCalc",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/color-contrast-calc.js~ColorContrastCalc#calcContrastRatio",
    "access": "private",
    "description": "",
    "lineNumber": 493,
    "ignore": true,
    "params": [
      {
        "name": "otherRgb",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 102,
    "kind": "method",
    "name": "calcUpperRatioLimit",
    "memberof": "lib/color-contrast-calc.js~ColorContrastCalc",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/color-contrast-calc.js~ColorContrastCalc#calcUpperRatioLimit",
    "access": "private",
    "description": "",
    "lineNumber": 503,
    "ignore": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 103,
    "kind": "method",
    "name": "brightnessThresholdCriteria",
    "memberof": "lib/color-contrast-calc.js~ColorContrastCalc",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/color-contrast-calc.js~ColorContrastCalc#brightnessThresholdCriteria",
    "access": "private",
    "description": "",
    "lineNumber": 517,
    "ignore": true,
    "params": [
      {
        "name": "targetRatio",
        "types": [
          "*"
        ]
      },
      {
        "name": "otherColor",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 104,
    "kind": "method",
    "name": "isBrighterThan",
    "memberof": "lib/color-contrast-calc.js~ColorContrastCalc",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/color-contrast-calc.js~ColorContrastCalc#isBrighterThan",
    "access": "public",
    "description": "",
    "lineNumber": 536,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} true if the relative luminance of the base color is greater than that of otherColor"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "ColorContrastCalc"
        ],
        "spread": false,
        "optional": false,
        "name": "otherColor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "true if the relative luminance of the base color is greater than that of otherColor"
    }
  },
  {
    "__docId__": 105,
    "kind": "method",
    "name": "hasSameLuminance",
    "memberof": "lib/color-contrast-calc.js~ColorContrastCalc",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/color-contrast-calc.js~ColorContrastCalc#hasSameLuminance",
    "access": "public",
    "description": "",
    "lineNumber": 544,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} true if the relative luminance of the base color is equal to that of otherColor"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "ColorContrastCalc"
        ],
        "spread": false,
        "optional": false,
        "name": "otherColor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "true if the relative luminance of the base color is equal to that of otherColor"
    }
  },
  {
    "__docId__": 106,
    "kind": "method",
    "name": "isLightColor",
    "memberof": "lib/color-contrast-calc.js~ColorContrastCalc",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/color-contrast-calc.js~ColorContrastCalc#isLightColor",
    "access": "public",
    "description": "",
    "lineNumber": 551,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} true if the contrast ratio against white is qual to/ less than the ratio against black"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "true if the contrast ratio against white is qual to/ less than the ratio against black"
    },
    "params": []
  },
  {
    "__docId__": 107,
    "kind": "method",
    "name": "freezeProperties",
    "memberof": "lib/color-contrast-calc.js~ColorContrastCalc",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/color-contrast-calc.js~ColorContrastCalc#freezeProperties",
    "access": "private",
    "description": "",
    "lineNumber": 558,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 108,
    "kind": "method",
    "name": "generateNewColor",
    "memberof": "lib/color-contrast-calc.js~ColorContrastCalc",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/color-contrast-calc.js~ColorContrastCalc#generateNewColor",
    "access": "private",
    "description": "",
    "lineNumber": 568,
    "ignore": true,
    "params": [
      {
        "name": "calc",
        "types": [
          "*"
        ]
      },
      {
        "name": "ratio",
        "types": [
          "*"
        ]
      },
      {
        "name": "name",
        "optional": true,
        "types": [
          "undefined"
        ],
        "defaultValue": "undefined"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 109,
    "kind": "file",
    "name": "lib/color-utils.js",
    "content": "\"use strict\";\n\nclass ColorUtils {\n  /**\n   * Converts a hex color code string to a decimal representation\n   * @param {string} hexCode - Hex color code such as \"#ffff00\"\n   * @returns {Array<number, number, number>} RGB value represented as an array of numbers\n   */\n  static hexCodeToDecimal(hexCode) {\n    const h = this.normalizeHexCode(hexCode, false);\n    return [0, 2, 4].map(s => h.substr(s, 2))\n      .map(primaryColor => Number.parseInt(primaryColor, 16));\n  }\n\n  /**\n   * Converts a hex color code to a 6-digit hexadecimal string\n   * @param {string} hexString - String that represent a hex code\n   * @param {boolean} [prefix=true] - Append '#' to the head of return value if a truthy value is given\n   * @returns {string} 6-digit hexadecimal string with/without leading '#'\n   */\n  static normalizeHexCode(hexString, prefix = true) {\n    const hl = hexString.toLowerCase();\n    const h = hl.startsWith(\"#\") ? hl.replace(\"#\", \"\") : hl;\n    let hexPart = h;\n    if (h.length === 3) {\n      hexPart = [0, 1, 2].map(s => h.substr(s, 1).repeat(2)).join(\"\");\n    }\n\n    return prefix ? `#${hexPart}` : hexPart;\n  }\n\n  /**\n   * Converts a decimal representation of color to a hex code string\n   * @param {Array<number, number, number>} rgb - RGB value represented as an array of numbers\n   * @returns {string} RGB value in hex code\n   */\n  static decimalToHexCode(rgb) {\n    return \"#\" + rgb.map(d => {\n      const h = d.toString(16);\n      return h.length === 1 ? \"0\" + h : h;\n    }).join(\"\");\n  }\n\n  /**\n   * Converts HSL value to RGB value\n   * @param {Array<number, number, number>} hsl - An array of numbers that represents HSL value\n   * @returns {Array<number, number, number>} An array of numbers that represents RGB value\n   */\n  static hslToRgb(hsl) {\n    /*\n       https://www.w3.org/TR/css3-color/#hsl-color\n     */\n    const h = hsl[0] / 360;\n    const s = hsl[1] / 100;\n    const l = hsl[2] / 100;\n    const m2 = l <= 0.5 ? l * (s + 1): l + s - l * s;\n    const m1 = l * 2 - m2;\n    const r = this.hueToRgb(m1, m2, h + 1 / 3) * 255;\n    const g = this.hueToRgb(m1, m2, h) * 255;\n    const b = this.hueToRgb(m1, m2, h - 1 / 3) * 255;\n    return [r, g, b].map(c => Math.round(c));\n  }\n\n  /**\n   * @private\n   */\n  static hueToRgb(m1, m2, hInit) {\n    let h = hInit;\n    if (h < 0) { h = h + 1; }\n    if (h > 1) { h = h - 1; }\n    if (h * 6 < 1) { return m1 + (m2 - m1) * h * 6; }\n    if (h * 2 < 1) { return m2; }\n    if (h * 3 < 2) { return m1 + (m2 - m1) * (2 / 3 - h) * 6; }\n    return m1;\n  }\n\n  /**\n   * Converts HSL value to hex code\n   * @param {Array<number, number, number>} hsl - An array of numbers that represents HSL value\n   * @returns {string} Hex code\n   */\n  static hslToHexCode(hsl) {\n    return this.decimalToHexCode(this.hslToRgb(hsl));\n  }\n\n  /**\n   * @private\n   */\n  static rgbToHsl(rgb) {\n    const l = this.rgbToLightness(rgb) * 100;\n    const s = this.rgbToSaturation(rgb) * 100;\n    const h = this.rgbToHue(rgb);\n\n    return [h, s, l];\n  }\n\n  /**\n   * @private\n   */\n  static rgbToLightness(rgb) {\n    return (Math.max(...rgb) + Math.min(...rgb)) / 510;\n  }\n\n  /**\n   * @private\n   */\n  static rgbToHue(rgb) {\n    /**\n     References:\n     Agoston, Max K. (2005).\n     \"Computer Graphics and Geometric Modeling: Implementation and Algorithms\".\n     London: Springer\n\n     https://accessibility.kde.org/hsl-adjusted.php#hue\n     */\n    const max = Math.max(...rgb);\n    const min = Math.min(...rgb);\n\n    if (max === min) { return 0; } /* you can return whatever you like */\n\n    const d = max - min;\n    const mi = rgb.reduce((m, v, i) => rgb[m] > v ? m : i, 0); /* maxIndex */\n    const h = mi * 120 + (rgb[(mi + 1) % 3] - rgb[(mi + 2) % 3]) * 60 / d;\n\n    return h < 0 ? h + 360 : h;\n  }\n\n  /**\n   * @private\n   */\n  static rgbToSaturation(rgb) {\n    const l = this.rgbToLightness(rgb);\n    const max = Math.max(...rgb);\n    const min = Math.min(...rgb);\n    const d = max - min;\n\n    if (max === min) { return 0; }\n\n    if (l <= 0.5) {\n      return d / (max + min);\n    } else {\n      return d / (510 - max - min);\n    }\n  }\n\n  /**\n   * @private\n   */\n  static hexCodeToHsl(hexCode) {\n    return this.rgbToHsl(this.hexCodeToDecimal(hexCode));\n  }\n\n  /**\n   * Decimal rounding with a given precision\n   * @param {number} number - Number to be rounded off\n   * @param {number} precision - Number of digits after the decimal point\n   * @returns {number} returns the rounded number\n   */\n  static decimalRound(number, precision) {\n    const factor = Math.pow(10, precision);\n    return Math.round(number * factor) / factor;\n  }\n\n  /**\n   * Checks if a given array is a valid representation of RGB color.\n   * @param {Array<number, number, number>} rgb - RGB value represented as an array of numbers\n   * @returns {boolean} true if the argument is a valid RGB color\n   */\n  static isValidRgb(rgb) {\n    return rgb.length === 3 &&\n      rgb.every(c => c >= 0 && c <= 255 &&\n                Number.isInteger(c));\n  }\n\n  /**\n   * Checks if a given array is a valid representation of HSL color.\n   * @param {Array<number, number, number>} hsl - HSL value represented as an array of numbers\n   * @returns {boolean} true if the argument is a valid HSL color\n   */\n  static isValidHsl(hsl) {\n    const upperLimits = [360, 100, 100];\n    return hsl.length === 3 &&\n      hsl.every((c, i) => typeof c === \"number\" &&\n                c >= 0 && c <= upperLimits[i]);\n  }\n\n  /**\n   * Checks if a given string is a valid representation of RGB color.\n   * @param {string} code - RGB value in hex code\n   * @returns {boolean} returns true if then argument is a valid RGB color\n   */\n  static isValidHexCode(code) {\n    return this.HEX_CODE_RE.test(code);\n  }\n\n  /**\n   * Checks if given two hex color codes represent a same color.\n   * @param {string} hexCode1 - Color given as a hex code, such as \"#ffff00\", \"#FFFF00\" or \"#ff0\"\n   * @param {string} hexCode2 - Color given as a hex code, such as \"#ffff00\", \"#FFFF00\" or \"#ff0\"\n   * @returns {boolean} True if given two colors are same\n   */\n  static isSameHexColor(hexCode1, hexCode2) {\n    const h1 = this.normalizeHexCode(hexCode1);\n    const h2 = this.normalizeHexCode(hexCode2);\n    return h1 === h2;\n  }\n\n  /**\n   * Checks if given two RGB values represent a same color.\n   * @param {Array<number, number, number>} rgb1 - Color given as an array of numbers, such as [255, 255, 0]\n   * @param {Array<number, number, number>} rgb2 - Color given as an array of numbers, such as [255, 255, 0]\n   * @returns {boolean} True if given two colors are same\n   */\n  static isSameRgbColor(rgb1, rgb2) {\n    if (rgb1.length !== rgb2.length) { return false; }\n    return rgb1.every((primaryColor, i) => primaryColor === rgb2[i]);\n  }\n\n  /**\n   * Checks if a given object is a string\n   * @param {object} str - Object to be checked\n   * @returns {boolean} returns true if the argument is a string\n   */\n  static isString(str) {\n    return typeof str === \"string\" || str instanceof String;\n  }\n\n  /**\n   * Checks if a given string is consists of uppercase letters\n   * @param {string} str - string to be checked\n   * @returns {boolean} returns true if letters in the argument string are all uppercase\n   */\n  static isUpperCase(str) {\n    return this.isString(str) && str.toUpperCase() === str;\n  }\n\n  /**\n   * @private\n   */\n  static setup() {\n    /** @private */\n    this.HEX_CODE_RE = /^#?[0-9a-f]{3}([0-9a-f]{3})?$/i;\n  }\n\n\n  /**\n   * @private\n   */\n  static clampToRange(value, lowerBound, upperBound) {\n    if (value <= lowerBound) {\n      return lowerBound;\n    } else if (value > upperBound) {\n      return upperBound;\n    }\n    return value;\n  }\n\n  /**\n   * @private\n   */\n  static rgbMap(values, func = null) {\n    if (func) {\n      return values.map(val => {\n        return ColorUtils.clampToRange(Math.round(func(val)), 0, 255);\n      });\n    } else {\n      return values.map(val => {\n        return ColorUtils.clampToRange(Math.round(val), 0, 255);\n      });\n    }\n  }\n}\n\n(function() {\n  class Matrix {\n    constructor(matrix) {\n      this.matrix = matrix;\n    }\n\n    add(otherMatrix) {\n      const newMatrix = this.matrix.map((row, i) => {\n        const otherRow = otherMatrix.matrix[i];\n        return row.map((s, j) => s + otherRow[j]);\n      });\n\n      return new Matrix(newMatrix);\n    }\n\n    multiply(n) {\n      if (typeof n === \"number\") {\n        return this.multiplyByScalar(n);\n      } else {\n        return this.productByVector(n);\n      }\n    }\n\n    multiplyByScalar(n) {\n      const newMatrix = this.matrix.map(row => row.map(c => c * n));\n      return new Matrix(newMatrix);\n    }\n\n    productByVector(vector) {\n      return this.matrix.map(row => {\n        return row.reduce((s, c, i) => s += c * vector[i], 0);\n      });\n    }\n  }\n\n  ColorUtils.Matrix = Matrix;\n\n  const rgbMap = ColorUtils.rgbMap;\n\n  class ContrastCalc {\n    /*\n       https://www.w3.org/TR/filter-effects/#funcdef-contrast\n       https://www.w3.org/TR/SVG/filters.html#TransferFunctionElementAttributes\n    */\n    static calcRgb(rgb, ratio = 100) {\n      return rgbMap(rgb, c => (c * ratio + 255 * (50 - ratio / 2)) / 100);\n    }\n  }\n\n  ColorUtils.ContrastCalc = ContrastCalc;\n\n  class BrightnessCalc {\n    /*\n       https://www.w3.org/TR/filter-effects/#funcdef-brightness\n       https://www.w3.org/TR/SVG/filters.html#TransferFunctionElementAttributes\n    */\n    static calcRgb(rgb, ratio = 100) {\n      return rgbMap(rgb, c => c * ratio / 100);\n    }\n  }\n\n  ColorUtils.BrightnessCalc = BrightnessCalc;\n\n  class InvertCalc {\n    /*\n       https://www.w3.org/TR/filter-effects-1/#invertEquivalent\n       https://www.w3.org/TR/SVG/filters.html#TransferFunctionElementAttributes\n    */\n    static calcRgb(rgb, ratio) {\n      return rgb.map(c => {\n        return Math.round((100 * c - 2 * c * ratio + 255 * ratio) / 100);\n      });\n    }\n  }\n\n  ColorUtils.InvertCalc = InvertCalc;\n\n  class HueRotateCalc {\n    /*\n       https://www.w3.org/TR/filter-effects/#funcdef-hue-rotate\n       https://www.w3.org/TR/SVG/filters.html#TransferFunctionElementAttributes\n    */\n    static calcRgb(rgb, deg) {\n      return rgbMap(this.calcRotation(deg).multiply(rgb));\n    }\n\n    static degToRad(deg) {\n      return Math.PI * deg / 180;\n    }\n\n    static calcRotation(deg) {\n      const rad = this.degToRad(deg);\n      const cosPartResult = this.cosPart.multiply(Math.cos(rad));\n      const sinPartResult = this.sinPart.multiply(Math.sin(rad));\n      return this.constPart.add(cosPartResult).add(sinPartResult);\n    }\n  }\n\n  HueRotateCalc.constPart = new Matrix([[0.213, 0.715, 0.072],\n                                        [0.213, 0.715, 0.072],\n                                        [0.213, 0.715, 0.072]]);\n\n  HueRotateCalc.cosPart = new Matrix([[0.787, -0.715, -0.072],\n                                      [-0.213,0.285, -0.072],\n                                      [-0.213, -0.715, 0.928]]);\n\n  HueRotateCalc.sinPart = new Matrix([[-0.213, -0.715, 0.928],\n                                      [0.143, 0.140, -0.283],\n                                      [-0.787, 0.715, 0.072]]);\n\n  ColorUtils.HueRotateCalc = HueRotateCalc;\n\n  class SaturateCalc {\n    /*\n       https://www.w3.org/TR/filter-effects/#funcdef-saturate\n       https://www.w3.org/TR/SVG/filters.html#feColorMatrixElement\n     */\n    static calcRgb(rgb, s) {\n      return rgbMap(this.calcSaturation(s).multiply(rgb));\n    }\n\n    static calcSaturation(s) {\n      return this.constPart.add(this.saturatePart.multiply(s / 100));\n    }\n  }\n\n  SaturateCalc.constPart = HueRotateCalc.constPart;\n  SaturateCalc.saturatePart = HueRotateCalc.cosPart;\n\n  ColorUtils.SaturateCalc = SaturateCalc;\n\n  class GrayscaleCalc {\n    /*\n       https://www.w3.org/TR/filter-effects/#funcdef-grayscale\n       https://www.w3.org/TR/filter-effects/#grayscaleEquivalent\n       https://www.w3.org/TR/SVG/filters.html#feColorMatrixElement\n    */\n    static calcRgb(rgb, s) {\n      return rgbMap(this.calcGrayscale(s).multiply(rgb));\n    }\n\n    static calcGrayscale(s) {\n      const r = 1 - Math.min(100, s) / 100;\n      return this.constPart.add(this.ratioPart.multiply(r));\n    }\n  }\n\n  GrayscaleCalc.constPart = new Matrix([[0.2126, 0.7152, 0.0722],\n                                        [0.2126, 0.7152, 0.0722],\n                                        [0.2126, 0.7152, 0.0722]]);\n\n  GrayscaleCalc.ratioPart = new Matrix([[0.7874, -0.7152, -0.0722],\n                                        [-0.2126, 0.2848, -0.0722],\n                                        [-0.2126, -0.7152, 0.9278]]);\n\n  ColorUtils.GrayscaleCalc = GrayscaleCalc;\n})();\n\nColorUtils.setup();\n\nmodule.exports.ColorUtils = ColorUtils;\n",
    "static": true,
    "longname": "/home/naoki/2017/170506/color-contrast-calc/lib/color-utils.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 110,
    "kind": "class",
    "name": "ColorUtils",
    "memberof": "lib/color-utils.js",
    "static": true,
    "longname": "lib/color-utils.js~ColorUtils",
    "access": "public",
    "export": true,
    "importPath": "color-contrast-calc/lib/color-utils.js",
    "importStyle": "{ColorUtils}",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 111,
    "kind": "method",
    "name": "hexCodeToDecimal",
    "memberof": "lib/color-utils.js~ColorUtils",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/color-utils.js~ColorUtils.hexCodeToDecimal",
    "access": "public",
    "description": "Converts a hex color code string to a decimal representation",
    "lineNumber": 9,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<number, number, number>} RGB value represented as an array of numbers"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "hexCode",
        "description": "Hex color code such as \"#ffff00\""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<number, number, number>"
      ],
      "spread": false,
      "description": "RGB value represented as an array of numbers"
    }
  },
  {
    "__docId__": 112,
    "kind": "method",
    "name": "normalizeHexCode",
    "memberof": "lib/color-utils.js~ColorUtils",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/color-utils.js~ColorUtils.normalizeHexCode",
    "access": "public",
    "description": "Converts a hex color code to a 6-digit hexadecimal string",
    "lineNumber": 21,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} 6-digit hexadecimal string with/without leading '#'"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "hexString",
        "description": "String that represent a hex code"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "prefix",
        "description": "Append '#' to the head of return value if a truthy value is given"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "6-digit hexadecimal string with/without leading '#'"
    }
  },
  {
    "__docId__": 113,
    "kind": "method",
    "name": "decimalToHexCode",
    "memberof": "lib/color-utils.js~ColorUtils",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/color-utils.js~ColorUtils.decimalToHexCode",
    "access": "public",
    "description": "Converts a decimal representation of color to a hex code string",
    "lineNumber": 37,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} RGB value in hex code"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<number, number, number>"
        ],
        "spread": false,
        "optional": false,
        "name": "rgb",
        "description": "RGB value represented as an array of numbers"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "RGB value in hex code"
    }
  },
  {
    "__docId__": 114,
    "kind": "method",
    "name": "hslToRgb",
    "memberof": "lib/color-utils.js~ColorUtils",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/color-utils.js~ColorUtils.hslToRgb",
    "access": "public",
    "description": "Converts HSL value to RGB value",
    "lineNumber": 49,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<number, number, number>} An array of numbers that represents RGB value"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<number, number, number>"
        ],
        "spread": false,
        "optional": false,
        "name": "hsl",
        "description": "An array of numbers that represents HSL value"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<number, number, number>"
      ],
      "spread": false,
      "description": "An array of numbers that represents RGB value"
    }
  },
  {
    "__docId__": 115,
    "kind": "method",
    "name": "hueToRgb",
    "memberof": "lib/color-utils.js~ColorUtils",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/color-utils.js~ColorUtils.hueToRgb",
    "access": "private",
    "description": "",
    "lineNumber": 67,
    "ignore": true,
    "params": [
      {
        "name": "m1",
        "types": [
          "*"
        ]
      },
      {
        "name": "m2",
        "types": [
          "*"
        ]
      },
      {
        "name": "hInit",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 116,
    "kind": "method",
    "name": "hslToHexCode",
    "memberof": "lib/color-utils.js~ColorUtils",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/color-utils.js~ColorUtils.hslToHexCode",
    "access": "public",
    "description": "Converts HSL value to hex code",
    "lineNumber": 82,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} Hex code"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<number, number, number>"
        ],
        "spread": false,
        "optional": false,
        "name": "hsl",
        "description": "An array of numbers that represents HSL value"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "Hex code"
    }
  },
  {
    "__docId__": 117,
    "kind": "method",
    "name": "rgbToHsl",
    "memberof": "lib/color-utils.js~ColorUtils",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/color-utils.js~ColorUtils.rgbToHsl",
    "access": "private",
    "description": "",
    "lineNumber": 89,
    "ignore": true,
    "params": [
      {
        "name": "rgb",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 118,
    "kind": "method",
    "name": "rgbToLightness",
    "memberof": "lib/color-utils.js~ColorUtils",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/color-utils.js~ColorUtils.rgbToLightness",
    "access": "private",
    "description": "",
    "lineNumber": 100,
    "ignore": true,
    "params": [
      {
        "name": "rgb",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 119,
    "kind": "method",
    "name": "rgbToHue",
    "memberof": "lib/color-utils.js~ColorUtils",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/color-utils.js~ColorUtils.rgbToHue",
    "access": "private",
    "description": "",
    "lineNumber": 107,
    "ignore": true,
    "params": [
      {
        "name": "rgb",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 120,
    "kind": "method",
    "name": "rgbToSaturation",
    "memberof": "lib/color-utils.js~ColorUtils",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/color-utils.js~ColorUtils.rgbToSaturation",
    "access": "private",
    "description": "",
    "lineNumber": 131,
    "ignore": true,
    "params": [
      {
        "name": "rgb",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 121,
    "kind": "method",
    "name": "hexCodeToHsl",
    "memberof": "lib/color-utils.js~ColorUtils",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/color-utils.js~ColorUtils.hexCodeToHsl",
    "access": "private",
    "description": "",
    "lineNumber": 149,
    "ignore": true,
    "params": [
      {
        "name": "hexCode",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 122,
    "kind": "method",
    "name": "decimalRound",
    "memberof": "lib/color-utils.js~ColorUtils",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/color-utils.js~ColorUtils.decimalRound",
    "access": "public",
    "description": "Decimal rounding with a given precision",
    "lineNumber": 159,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} returns the rounded number"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": "Number to be rounded off"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "precision",
        "description": "Number of digits after the decimal point"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "returns the rounded number"
    }
  },
  {
    "__docId__": 123,
    "kind": "method",
    "name": "isValidRgb",
    "memberof": "lib/color-utils.js~ColorUtils",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/color-utils.js~ColorUtils.isValidRgb",
    "access": "public",
    "description": "Checks if a given array is a valid representation of RGB color.",
    "lineNumber": 169,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} true if the argument is a valid RGB color"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<number, number, number>"
        ],
        "spread": false,
        "optional": false,
        "name": "rgb",
        "description": "RGB value represented as an array of numbers"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "true if the argument is a valid RGB color"
    }
  },
  {
    "__docId__": 124,
    "kind": "method",
    "name": "isValidHsl",
    "memberof": "lib/color-utils.js~ColorUtils",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/color-utils.js~ColorUtils.isValidHsl",
    "access": "public",
    "description": "Checks if a given array is a valid representation of HSL color.",
    "lineNumber": 180,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} true if the argument is a valid HSL color"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<number, number, number>"
        ],
        "spread": false,
        "optional": false,
        "name": "hsl",
        "description": "HSL value represented as an array of numbers"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "true if the argument is a valid HSL color"
    }
  },
  {
    "__docId__": 125,
    "kind": "method",
    "name": "isValidHexCode",
    "memberof": "lib/color-utils.js~ColorUtils",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/color-utils.js~ColorUtils.isValidHexCode",
    "access": "public",
    "description": "Checks if a given string is a valid representation of RGB color.",
    "lineNumber": 192,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} returns true if then argument is a valid RGB color"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "code",
        "description": "RGB value in hex code"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "returns true if then argument is a valid RGB color"
    }
  },
  {
    "__docId__": 126,
    "kind": "method",
    "name": "isSameHexColor",
    "memberof": "lib/color-utils.js~ColorUtils",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/color-utils.js~ColorUtils.isSameHexColor",
    "access": "public",
    "description": "Checks if given two hex color codes represent a same color.",
    "lineNumber": 202,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} True if given two colors are same"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "hexCode1",
        "description": "Color given as a hex code, such as \"#ffff00\", \"#FFFF00\" or \"#ff0\""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "hexCode2",
        "description": "Color given as a hex code, such as \"#ffff00\", \"#FFFF00\" or \"#ff0\""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "True if given two colors are same"
    }
  },
  {
    "__docId__": 127,
    "kind": "method",
    "name": "isSameRgbColor",
    "memberof": "lib/color-utils.js~ColorUtils",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/color-utils.js~ColorUtils.isSameRgbColor",
    "access": "public",
    "description": "Checks if given two RGB values represent a same color.",
    "lineNumber": 214,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} True if given two colors are same"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<number, number, number>"
        ],
        "spread": false,
        "optional": false,
        "name": "rgb1",
        "description": "Color given as an array of numbers, such as [255, 255, 0]"
      },
      {
        "nullable": null,
        "types": [
          "Array<number, number, number>"
        ],
        "spread": false,
        "optional": false,
        "name": "rgb2",
        "description": "Color given as an array of numbers, such as [255, 255, 0]"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "True if given two colors are same"
    }
  },
  {
    "__docId__": 128,
    "kind": "method",
    "name": "isString",
    "memberof": "lib/color-utils.js~ColorUtils",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/color-utils.js~ColorUtils.isString",
    "access": "public",
    "description": "Checks if a given object is a string",
    "lineNumber": 224,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} returns true if the argument is a string"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "str",
        "description": "Object to be checked"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "returns true if the argument is a string"
    }
  },
  {
    "__docId__": 129,
    "kind": "method",
    "name": "isUpperCase",
    "memberof": "lib/color-utils.js~ColorUtils",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/color-utils.js~ColorUtils.isUpperCase",
    "access": "public",
    "description": "Checks if a given string is consists of uppercase letters",
    "lineNumber": 233,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} returns true if letters in the argument string are all uppercase"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "str",
        "description": "string to be checked"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "returns true if letters in the argument string are all uppercase"
    }
  },
  {
    "__docId__": 130,
    "kind": "method",
    "name": "setup",
    "memberof": "lib/color-utils.js~ColorUtils",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/color-utils.js~ColorUtils.setup",
    "access": "private",
    "description": "",
    "lineNumber": 240,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 131,
    "kind": "member",
    "name": "HEX_CODE_RE",
    "memberof": "lib/color-utils.js~ColorUtils",
    "static": true,
    "longname": "lib/color-utils.js~ColorUtils.HEX_CODE_RE",
    "access": "private",
    "description": null,
    "lineNumber": 242,
    "ignore": true,
    "type": {
      "types": [
        "undefined"
      ]
    }
  },
  {
    "__docId__": 132,
    "kind": "method",
    "name": "clampToRange",
    "memberof": "lib/color-utils.js~ColorUtils",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/color-utils.js~ColorUtils.clampToRange",
    "access": "private",
    "description": "",
    "lineNumber": 249,
    "ignore": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      },
      {
        "name": "lowerBound",
        "types": [
          "*"
        ]
      },
      {
        "name": "upperBound",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 133,
    "kind": "method",
    "name": "rgbMap",
    "memberof": "lib/color-utils.js~ColorUtils",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/color-utils.js~ColorUtils.rgbMap",
    "access": "private",
    "description": "",
    "lineNumber": 261,
    "ignore": true,
    "params": [
      {
        "name": "values",
        "types": [
          "*"
        ]
      },
      {
        "name": "func",
        "optional": true,
        "types": [
          "undefined"
        ],
        "defaultValue": "undefined"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "index",
    "content": "# ColorContrastCalc\n\nUtility that supports you in choosing colors with sufficient contrast, WCAG 2.0 in mind\n\n## Installation\n\n    $ npm install --save color-contrast-calc\n\n## Usage\n\nThis library provides `ColorContrastCalc` class.\n\n\n### Example 1\n\nIf you want to calculate the contrast ratio between yellow and black, save the following code as `yellow-black-contrast.js`:\n\n```node\nconst ColorContrastCalc = require(\"color-contrast-calc\").ColorContrastCalc;\n\nconst yellow = ColorContrastCalc.getByName(\"yellow\");\nconst black = ColorContrastCalc.getByName(\"black\");\n\nconsole.log(`contast ratio between yellow and black: ${yellow.contrastRatioAgainst(black)}`);\nconsole.log(`contrast level: ${yellow.contrastLevel(black)}`);\n```\n\nAnd execute the script:\n\n```\n$ node yellow-black-contrast.js\ncontast ratio between yellow and black: 19.555999999999997\ncontrast level: AAA\n```\n\n### Example 2\n\nIf you want to find a combination of colors with sufficient contrast by changing the brightness of one of those colors, save the following code as `yellow-orange-contrast.js`:\n\n```node\nconst ColorContrastCalc = require(\"color-contrast-calc\").ColorContrastCalc;\n\nconst yellow = ColorContrastCalc.getByName(\"yellow\");\nconst orange = ColorContrastCalc.getByName(\"orange\");\nconst aOrange = yellow.findBrightnessThreshold(orange, \"A\");\nconst aaOrange = yellow.findBrightnessThreshold(orange, \"AA\");\n\nconsole.log(`aOrange: ${aOrange.hexCode}`);\nconsole.log(`contrast ratio between yellow and aOrange: ${yellow.contrastRatioAgainst(aOrange)}`);\nconsole.log(`aaOrange: ${aaOrange.hexCode}`);\nconsole.log(`contrast ratio between yellow and aaOrange: ${yellow.contrastRatioAgainst(aaOrange)}`);\n```\n\nAnd execute the script:\n\n```\n$ node yellow-orange-contrast.js\naOrange: #c68000\ncontrast ratio between yellow and aOrange: 3.013798229247296\naaOrange: #9d6600\ncontrast ratio between yellow and aaOrange: 4.512053816540577\n```\n\nPlease refer to the [documentation](http://htmlpreview.github.io/?https://github.com/nico-hn/color-contrast-calc/blob/develop/doc/class/lib/color-contrast-calc.js~ColorContrastCalc.html) for the details.\n\n## Contributing\n\n1. Fork it\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Add some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create new Pull Request\n",
    "longname": "/home/naoki/2017/170506/color-contrast-calc/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"color-contrast-calc\",\n  \"version\": \"0.1.2\",\n  \"description\": \"Utility that supports you in choosing colors with sufficient contrast, WCAG 2.0 in mind\",\n  \"homepage\": \"https://github.com/nico-hn/color-contrast-calc\",\n  \"main\": \"index.js\",\n  \"author\": \"HASHIMOTO, Naoki\",\n  \"license\": \"MIT\",\n  \"scripts\": {\n    \"test\": \"mocha\",\n    \"lint\": \"eslint *.js lib/*.js test/*.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/nico-hn/color-contrast-calc.git\"\n  },\n  \"devDependencies\": {\n    \"babel-cli\": \"^6.24.1\",\n    \"babel-plugin-transform-runtime\": \"^6.23.0\",\n    \"babel-polyfill\": \"^6.23.0\",\n    \"babel-preset-env\": \"^1.5.1\",\n    \"babelify\": \"^7.3.0\",\n    \"browserify\": \"^14.4.0\",\n    \"chai\": \"^3.5.0\",\n    \"esdoc\": \"^1.0.1\",\n    \"esdoc-standard-plugin\": \"^1.0.0\",\n    \"eslint\": \"^3.19.0\",\n    \"gulp\": \"^3.9.1\",\n    \"gulp-babel\": \"^6.1.2\",\n    \"gulp-cli\": \"^1.3.0\",\n    \"mocha\": \"^3.3.0\",\n    \"sinon\": \"^2.2.0\",\n    \"vinyl-source-stream\": \"^1.1.0\"\n  }\n}\n",
    "longname": "/home/naoki/2017/170506/color-contrast-calc/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  }
]